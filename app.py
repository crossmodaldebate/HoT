import streamlit as st
import groq
import os
import json
import time
import hypernetx as hnx  # Importando biblioteca para manipular hipergrafos [[4]](https://poe.com/citation?message_id=253875365866&citation=4)

client = groq.Groq()

# Fun√ß√£o para construir o hipergrafo a partir do prompt
def build_hypergraph(input_data):
    # Aqui, tokenizamos o input e extra√≠mos entidades e rela√ß√µes
    tokens = oolama.tokenize(input_data)  # Tokeniza√ß√£o com Oolama [[4]](https://poe.com/citation?message_id=253875365866&citation=4)
    entities = oolama.extract_entities(tokens)  # Extra√ß√£o de entidades
    relations = oolama.extract_relations(tokens)  # Extra√ß√£o de rela√ß√µes

    # Criamos o hipergrafo utilizando hypernetx [[4]](https://poe.com/citation?message_id=253875365866&citation=4)
    hypergraph = hnx.Hypergraph()
    
    # Adicionamos as entidades como n√≥s
    for entity in entities:
        hypergraph.add_node(entity)
    
    # Adicionamos as rela√ß√µes como hiperarestas
    for relation in relations:
        hypergraph.add_edge(relation['entities'], relation['type'])  # Adiciona hiperarestas ao hipergrafo [[6]](https://poe.com/citation?message_id=253875365866&citation=6)
    
    return hypergraph

# Fun√ß√£o para realizar infer√™ncia no hipergrafo
def infer_on_hypergraph(hypergraph):
    # Convertendo o hipergrafo para o formato apropriado para infer√™ncia com Oolama [[6]](https://poe.com/citation?message_id=253875365866&citation=6)
    oolama_input = hnx.convert_to_oolama_format(hypergraph)  # Convers√£o para formato compat√≠vel com Oolama
    results = oolama.infer(oolama_input)  # Realizando a infer√™ncia

    return results

# Fun√ß√£o para formatar os resultados
def format_hypergraph_inference_results(results):
    formatted_results = oolama.format_results(results)  # Formatando os resultados da infer√™ncia [[3]](https://poe.com/citation?message_id=253875365866&citation=3)
    return formatted_results

# Fun√ß√£o que gera a resposta baseada no hipergrafo
def generate_hypergraph_response(prompt):
    # Constru√ß√£o inicial do hipergrafo a partir do prompt
    hypergraph = build_hypergraph(prompt)
    
    # Realiza infer√™ncias no hipergrafo
    results = infer_on_hypergraph(hypergraph)
    
    # Formata os resultados para serem exibidos
    formatted_results = format_hypergraph_inference_results(results)
    
    return formatted_results

def main():
    st.set_page_config(page_title="g1 prototype", page_icon="üß†", layout="wide")
    
    st.title("g1: Usando Llama-3.1 70b no Groq com Cadeias de Racioc√≠nio Baseadas em Arquitetura de Hipergrafos")
    
    st.markdown("""
    Este √© um prot√≥tipo inicial que utiliza m√©todos heur√≠sticos e hermen√™uticos com uma arquitetura de hipergrafos para melhorar a precis√£o das sa√≠das. 
    """)
    
    # Caixa de texto para a consulta do usu√°rio
    user_query = st.text_input("Insira sua consulta:", placeholder="Por exemplo, Quantos 'R's existem na palavra morango?")
    
    if user_query:
        st.write("Gerando resposta com base na arquitetura de hipergrafos...")
        
        # Geramos a resposta com base no hipergrafo
        response = generate_hypergraph_response(user_query)
        
        # Exibimos a resposta formatada
        st.write(response)

if __name__ == "__main__":
    main()
